<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/FILE_VERSIONING_DOCS.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/FILE_VERSIONING_DOCS.md" />
              <option name="updatedContent" value="# Dokumentacja Systemu Versionowania Plików&#10;&#10;## Spis treści&#10;1. [Przegląd systemu](#przegląd-systemu)&#10;2. [Architektura bazy danych](#architektura-bazy-danych)&#10;3. [Struktura w S3](#struktura-w-s3)&#10;4. [Endpointy API](#endpointy-api)&#10;5. [Logika działania](#logika-działania)&#10;6. [Przykłady użycia](#przykłady-użycia)&#10;7. [Diagramy przepływu](#diagramy-przepływu)&#10;&#10;---&#10;&#10;## Przegląd systemu&#10;&#10;System versionowania plików w SPCloud umożliwia:&#10;- **Automatyczne tworzenie wersji** przy każdym uploadzę tego samego pliku&#10;- **Przechowywanie wszystkich wersji** w S3 i bazie danych&#10;- **Logiczne przywracanie wersji** (zmiana wskaźnika w bazie bez kopiowania plików)&#10;- **Pobieranie konkretnych wersji** na żądanie&#10;- **Usuwanie wybranych wersji** (z wyjątkiem aktualnej)&#10;&#10;**Kluczowa koncepcja:** Każda wersja jest fizycznie przechowywana w S3 jako osobny plik, ale użytkownik operuje na logicznej nazwie pliku.&#10;&#10;---&#10;&#10;## Architektura bazy danych&#10;&#10;### Tabela: `files` (FileStorage)&#10;&#10;Główna tabela przechowująca metadane plików.&#10;&#10;| Kolumna | Typ | Opis |&#10;|---------|-----|------|&#10;| `id` | UUID | Unikalny identyfikator pliku (PK) |&#10;| `name` | VARCHAR | Bazowa nazwa pliku (np. `document.txt`) |&#10;| `path` | VARCHAR | Ścieżka S3 (legacy, używana do zgodności) |&#10;| `size` | INTEGER | Rozmiar aktualnej wersji w bajtach |&#10;| `owner` | VARCHAR | Nazwa użytkownika (FK → `users.username`) |&#10;| `current_version` | INTEGER | **Numer aktualnej wersji** (1, 2, 3...) |&#10;| `created_at` | TIMESTAMP | Data utworzenia pliku |&#10;| `updated_at` | TIMESTAMP | Data ostatniej aktualizacji |&#10;| `is_favorite` | BOOLEAN | Czy plik jest ulubiony |&#10;&#10;**Unique Constraint:** `(owner, name)` - jeden użytkownik nie może mieć dwóch plików o tej samej nazwie.&#10;&#10;**Przykładowy rekord:**&#10;```sql&#10;id: 550e8400-e29b-41d4-a716-446655440000&#10;name: document.txt&#10;owner: admin&#10;current_version: 3&#10;size: 2048&#10;created_at: 2025-10-24 10:00:00&#10;updated_at: 2025-10-24 10:15:00&#10;```&#10;&#10;### Tabela: `file_versions` (FileVersion)&#10;&#10;Przechowuje wszystkie wersje każdego pliku.&#10;&#10;| Kolumna | Typ | Opis |&#10;|---------|-----|------|&#10;| `id` | UUID | Unikalny identyfikator wersji (PK) |&#10;| `file_id` | UUID | Odniesienie do pliku (FK → `files.id`) |&#10;| `version_number` | INTEGER | Numer wersji (1, 2, 3...) |&#10;| `path` | VARCHAR | Pełna ścieżka S3 z wersją |&#10;| `size` | INTEGER | Rozmiar tej wersji w bajtach |&#10;| `created_at` | TIMESTAMP | Data utworzenia wersji |&#10;| `created_by` | VARCHAR | Kto utworzył wersję (FK → `users.username`) |&#10;&#10;**Cascade:** Usunięcie rekordu z `files` automatycznie usuwa wszystkie jego wersje.&#10;&#10;**Przykładowe rekordy:**&#10;```sql&#10;-- Wersja 1&#10;id: 111e8400-e29b-41d4-a716-446655440001&#10;file_id: 550e8400-e29b-41d4-a716-446655440000&#10;version_number: 1&#10;path: s3://user-admin/document_v1.txt&#10;size: 1024&#10;created_by: admin&#10;created_at: 2025-10-24 10:00:00&#10;&#10;-- Wersja 2&#10;id: 222e8400-e29b-41d4-a716-446655440002&#10;file_id: 550e8400-e29b-41d4-a716-446655440000&#10;version_number: 2&#10;path: s3://user-admin/document_v2.txt&#10;size: 1536&#10;created_by: admin&#10;created_at: 2025-10-24 10:10:00&#10;&#10;-- Wersja 3 (aktualna)&#10;id: 333e8400-e29b-41d4-a716-446655440003&#10;file_id: 550e8400-e29b-41d4-a716-446655440000&#10;version_number: 3&#10;path: s3://user-admin/document_v3.txt&#10;size: 2048&#10;created_by: admin&#10;created_at: 2025-10-24 10:15:00&#10;```&#10;&#10;### Relacje&#10;&#10;```&#10;users (1) ----&lt; (N) files&#10;  |&#10;  └----&lt; (N) file_versions (created_by)&#10;&#10;files (1) ----&lt; (N) file_versions&#10;```&#10;&#10;---&#10;&#10;## Struktura w S3&#10;&#10;### Organizacja bucketów&#10;&#10;Każdy użytkownik ma swój własny bucket:&#10;```&#10;user-{username}/&#10;```&#10;&#10;Przykład: użytkownik `admin` → bucket `user-admin`&#10;&#10;### Nazewnictwo plików z wersjami&#10;&#10;Format: `{nazwa_bez_rozszerzenia}_v{numer}.{rozszerzenie}`&#10;&#10;**Przykład struktury S3:**&#10;```&#10;user-admin/&#10;  ├── document_v1.txt&#10;  ├── document_v2.txt&#10;  ├── document_v3.txt&#10;  ├── photo_v1.jpg&#10;  ├── photo_v2.jpg&#10;  ├── report_v1.pdf&#10;  └── report_v2.pdf&#10;&#10;user-john/&#10;  ├── notes_v1.txt&#10;  ├── notes_v2.txt&#10;  └── image_v1.png&#10;```&#10;&#10;### Parsowanie nazw plików&#10;&#10;System automatycznie:&#10;- **Usuwa wersję z nazwy przy uploadzię:** `document_v5.txt` → bazowa nazwa: `document.txt`&#10;- **Dodaje wersję przy zapisie do S3:** `document.txt` + wersja 3 → `document_v3.txt`&#10;&#10;**Kod parsowania:**&#10;```python&#10;def _parse_base_filename(filename: str) -&gt; str:&#10;    &quot;&quot;&quot;document_v1.txt -&gt; document.txt&quot;&quot;&quot;&#10;    name, ext = os.path.splitext(filename)&#10;    if '_v' in name:&#10;        parts = name.rsplit('_v', 1)&#10;        if len(parts) == 2 and parts[1].isdigit():&#10;            return f&quot;{parts[0]}{ext}&quot;&#10;    return filename&#10;&#10;def _build_versioned_filename(filename: str, version: int) -&gt; str:&#10;    &quot;&quot;&quot;document.txt + 3 -&gt; document_v3.txt&quot;&quot;&quot;&#10;    name, ext = os.path.splitext(filename)&#10;    return f&quot;{name}_v{version}{ext}&quot;&#10;```&#10;&#10;---&#10;&#10;## Endpointy API&#10;&#10;### 1. Upload pliku (z automatycznym versionowaniem)&#10;&#10;**Endpoint:** `POST /api/v1/files/upload`&#10;&#10;**Headers:**&#10;```&#10;Authorization: Bearer {access_token}&#10;Content-Type: multipart/form-data&#10;```&#10;&#10;**Body (form-data):**&#10;```&#10;file: [wybierz plik]&#10;```&#10;&#10;**Logika:**&#10;1. Sprawdza czy plik o tej nazwie już istnieje&#10;2. Jeśli **NIE istnieje:**&#10;   - Tworzy rekord w `files` z `current_version = 1`&#10;   - Tworzy rekord w `file_versions` z `version_number = 1`&#10;   - Zapisuje w S3 jako `filename_v1.ext`&#10;3. Jeśli **istnieje:**&#10;   - Znajduje najwyższy numer wersji&#10;   - Tworzy nowy rekord w `file_versions` z `version_number = max + 1`&#10;   - Aktualizuje `files.current_version` na nowy numer&#10;   - Zapisuje w S3 jako `filename_vN.ext`&#10;&#10;**Odpowiedź (nowy plik):**&#10;```json&#10;{&#10;    &quot;message&quot;: &quot;File uploaded successfully&quot;,&#10;    &quot;file_id&quot;: &quot;550e8400-e29b-41d4-a716-446655440000&quot;,&#10;    &quot;filename&quot;: &quot;document.txt&quot;,&#10;    &quot;version&quot;: 1,&#10;    &quot;size&quot;: 1024,&#10;    &quot;path&quot;: &quot;s3://user-admin/document_v1.txt&quot;&#10;}&#10;```&#10;&#10;**Odpowiedź (nowa wersja):**&#10;```json&#10;{&#10;    &quot;message&quot;: &quot;New version uploaded successfully&quot;,&#10;    &quot;file_id&quot;: &quot;550e8400-e29b-41d4-a716-446655440000&quot;,&#10;    &quot;filename&quot;: &quot;document.txt&quot;,&#10;    &quot;version&quot;: 3,&#10;    &quot;size&quot;: 2048,&#10;    &quot;path&quot;: &quot;s3://user-admin/document_v3.txt&quot;&#10;}&#10;```&#10;&#10;---&#10;&#10;### 2. Lista plików użytkownika&#10;&#10;**Endpoint:** `GET /api/v1/files/`&#10;&#10;**Headers:**&#10;```&#10;Authorization: Bearer {access_token}&#10;```&#10;&#10;**Odpowiedź:**&#10;```json&#10;{&#10;    &quot;files&quot;: [&#10;        {&#10;            &quot;id&quot;: &quot;550e8400-e29b-41d4-a716-446655440000&quot;,&#10;            &quot;name&quot;: &quot;document.txt&quot;,&#10;            &quot;size&quot;: 2048,&#10;            &quot;owner&quot;: &quot;admin&quot;,&#10;            &quot;current_version&quot;: 3,&#10;            &quot;created_at&quot;: &quot;2025-10-24T10:00:00Z&quot;,&#10;            &quot;updated_at&quot;: &quot;2025-10-24T10:15:00Z&quot;,&#10;            &quot;is_favorite&quot;: false&#10;        }&#10;    ]&#10;}&#10;```&#10;&#10;**Uwaga:** Pole `current_version` pokazuje która wersja jest obecnie aktywna.&#10;&#10;---&#10;&#10;### 3. Pobierz aktualną wersję pliku&#10;&#10;**Endpoint:** `GET /api/v1/files/download/{file_id}`&#10;&#10;**Headers:**&#10;```&#10;Authorization: Bearer {access_token}&#10;```&#10;&#10;**Parametry:**&#10;- `file_id` (UUID) - identyfikator pliku&#10;&#10;**Logika:**&#10;1. Pobiera rekord z `files` po `file_id`&#10;2. Odczytuje wartość `current_version` (np. 3)&#10;3. Szuka rekordu w `file_versions` gdzie `version_number = 3`&#10;4. Pobiera plik z S3: `document_v3.txt`&#10;5. Zwraca użytkownikowi z oryginalną nazwą: `document.txt`&#10;&#10;**Odpowiedź:** Plik binarny (Content-Type: application/octet-stream)&#10;&#10;**Przykład curl:**&#10;```bash&#10;curl -X GET &quot;http://localhost:8000/api/v1/files/download/550e8400-e29b-41d4-a716-446655440000&quot; \&#10;     -H &quot;Authorization: Bearer eyJhbGc...&quot; \&#10;     -o document.txt&#10;```&#10;&#10;---&#10;&#10;### 4. Lista wersji pliku&#10;&#10;**Endpoint:** `GET /api/v1/files/{file_id}/versions`&#10;&#10;**Headers:**&#10;```&#10;Authorization: Bearer {access_token}&#10;```&#10;&#10;**Odpowiedź:**&#10;```json&#10;{&#10;    &quot;file_id&quot;: &quot;550e8400-e29b-41d4-a716-446655440000&quot;,&#10;    &quot;versions&quot;: [&#10;        {&#10;            &quot;version_number&quot;: 3,&#10;            &quot;size&quot;: 2048,&#10;            &quot;created_at&quot;: &quot;2025-10-24T10:15:00Z&quot;,&#10;            &quot;created_by&quot;: &quot;admin&quot;,&#10;            &quot;is_current&quot;: true&#10;        },&#10;        {&#10;            &quot;version_number&quot;: 2,&#10;            &quot;size&quot;: 1536,&#10;            &quot;created_at&quot;: &quot;2025-10-24T10:10:00Z&quot;,&#10;            &quot;created_by&quot;: &quot;admin&quot;,&#10;            &quot;is_current&quot;: false&#10;        },&#10;        {&#10;            &quot;version_number&quot;: 1,&#10;            &quot;size&quot;: 1024,&#10;            &quot;created_at&quot;: &quot;2025-10-24T10:00:00Z&quot;,&#10;            &quot;created_by&quot;: &quot;admin&quot;,&#10;            &quot;is_current&quot;: false&#10;        }&#10;    ]&#10;}&#10;```&#10;&#10;**Sortowanie:** Od najnowszej do najstarszej (DESC)&#10;&#10;---&#10;&#10;### 5. Pobierz konkretną wersję&#10;&#10;**Endpoint:** `GET /api/v1/files/{file_id}/versions/{version_number}`&#10;&#10;**Headers:**&#10;```&#10;Authorization: Bearer {access_token}&#10;```&#10;&#10;**Parametry:**&#10;- `file_id` (UUID) - identyfikator pliku&#10;- `version_number` (int) - numer wersji (1, 2, 3...)&#10;&#10;**Logika:**&#10;1. Znajduje rekord w `file_versions` po `file_id` i `version_number`&#10;2. Pobiera plik z S3: `document_v2.txt`&#10;3. Zwraca z oryginalną nazwą: `document.txt`&#10;&#10;**Odpowiedź:** Plik binarny&#10;&#10;**Przykład:**&#10;```bash&#10;# Pobierz wersję 1&#10;curl -X GET &quot;http://localhost:8000/api/v1/files/550e8400-.../versions/1&quot; \&#10;     -H &quot;Authorization: Bearer eyJhbGc...&quot; \&#10;     -o document_v1.txt&#10;```&#10;&#10;---&#10;&#10;### 6. Przywróć wersję (Restore)&#10;&#10;**Endpoint:** `POST /api/v1/files/{file_id}/restore/{version_number}`&#10;&#10;**Headers:**&#10;```&#10;Authorization: Bearer {access_token}&#10;```&#10;&#10;**Parametry:**&#10;- `file_id` (UUID) - identyfikator pliku&#10;- `version_number` (int) - numer wersji do przywrócenia&#10;&#10;**Logika (TYLKO UPDATE W BAZIE!):**&#10;1. Sprawdza czy wersja istnieje&#10;2. **Aktualizuje** `files.current_version = version_number`&#10;3. **Aktualizuje** `files.size` na rozmiar tej wersji&#10;4. **Aktualizuje** `files.updated_at`&#10;5. **NIE kopiuje** plików w S3!&#10;&#10;**Odpowiedź:**&#10;```json&#10;{&#10;    &quot;message&quot;: &quot;File restored to version 2&quot;,&#10;    &quot;file_id&quot;: &quot;550e8400-e29b-41d4-a716-446655440000&quot;,&#10;    &quot;current_version&quot;: 2,&#10;    &quot;filename&quot;: &quot;document.txt&quot;&#10;}&#10;```&#10;&#10;**Przykład SQL wykonywany wewnętrznie:**&#10;```sql&#10;UPDATE files &#10;SET current_version = 2, &#10;    size = 1536, &#10;    updated_at = NOW()&#10;WHERE id = '550e8400-e29b-41d4-a716-446655440000';&#10;```&#10;&#10;**Efekt:** Następne pobranie pliku zwróci `document_v2.txt` zamiast `document_v3.txt`&#10;&#10;---&#10;&#10;### 7. Usuń konkretną wersję&#10;&#10;**Endpoint:** `DELETE /api/v1/files/{file_id}/versions/{version_number}`&#10;&#10;**Headers:**&#10;```&#10;Authorization: Bearer {access_token}&#10;```&#10;&#10;**Parametry:**&#10;- `file_id` (UUID) - identyfikator pliku&#10;- `version_number` (int) - numer wersji do usunięcia&#10;&#10;**Ograniczenia:**&#10;- ❌ **NIE MOŻNA** usunąć wersji która jest `current_version`&#10;- ✅ Można usunąć dowolną starszą wersję&#10;&#10;**Logika:**&#10;1. Sprawdza czy `version_number != current_version`&#10;2. Usuwa plik z S3: `document_v1.txt`&#10;3. Usuwa rekord z `file_versions`&#10;4. Aktualizuje `users.used_storage_mb` (odejmuje rozmiar)&#10;&#10;**Odpowiedź sukces:**&#10;```json&#10;{&#10;    &quot;message&quot;: &quot;Version 1 deleted successfully&quot;,&#10;    &quot;file_id&quot;: &quot;550e8400-e29b-41d4-a716-446655440000&quot;,&#10;    &quot;filename&quot;: &quot;document.txt&quot;&#10;}&#10;```&#10;&#10;**Odpowiedź błąd (próba usunięcia current):**&#10;```json&#10;{&#10;    &quot;detail&quot;: &quot;Cannot delete current version. Restore another version first.&quot;&#10;}&#10;```&#10;&#10;---&#10;&#10;### 8. Usuń plik (wszystkie wersje)&#10;&#10;**Endpoint:** `DELETE /api/v1/files/{file_id}`&#10;&#10;**Headers:**&#10;```&#10;Authorization: Bearer {access_token}&#10;```&#10;&#10;**Logika:**&#10;1. Pobiera wszystkie wersje z `file_versions`&#10;2. **Usuwa wszystkie pliki z S3:**&#10;   - `document_v1.txt`&#10;   - `document_v2.txt`&#10;   - `document_v3.txt`&#10;3. Usuwa rekord z `files` (CASCADE usuwa też z `file_versions`)&#10;4. Aktualizuje `users.used_storage_mb`&#10;&#10;**Odpowiedź:**&#10;```json&#10;{&#10;    &quot;message&quot;: &quot;File 'document.txt' deleted successfully with 3 version(s)&quot;&#10;}&#10;```&#10;&#10;---&#10;&#10;## Logika działania&#10;&#10;### Scenariusz 1: Upload nowego pliku&#10;&#10;**Użytkownik:** Upload `report.pdf`&#10;&#10;**Backend:**&#10;1. Sprawdza czy `report.pdf` istnieje w bazie → NIE&#10;2. Tworzy rekord w `files`:&#10;   ```sql&#10;   INSERT INTO files (id, name, owner, current_version, size, ...)&#10;   VALUES ('uuid1', 'report.pdf', 'admin', 1, 5120, ...);&#10;   ```&#10;3. Tworzy rekord w `file_versions`:&#10;   ```sql&#10;   INSERT INTO file_versions (id, file_id, version_number, path, size, ...)&#10;   VALUES ('uuid2', 'uuid1', 1, 's3://user-admin/report_v1.pdf', 5120, ...);&#10;   ```&#10;4. Upload do S3: `user-admin/report_v1.pdf`&#10;&#10;**Stan w bazie:**&#10;```&#10;files:&#10;  id: uuid1, name: report.pdf, current_version: 1&#10;&#10;file_versions:&#10;  id: uuid2, file_id: uuid1, version_number: 1, path: s3://.../report_v1.pdf&#10;```&#10;&#10;**Stan w S3:**&#10;```&#10;user-admin/&#10;  └── report_v1.pdf&#10;```&#10;&#10;---&#10;&#10;### Scenariusz 2: Upload kolejnej wersji&#10;&#10;**Użytkownik:** Upload `report.pdf` (zmodyfikowany)&#10;&#10;**Backend:**&#10;1. Sprawdza czy `report.pdf` istnieje → TAK (uuid1)&#10;2. Pobiera wszystkie wersje → max version = 1&#10;3. Tworzy nową wersję (version = 2):&#10;   ```sql&#10;   INSERT INTO file_versions (id, file_id, version_number, path, size, ...)&#10;   VALUES ('uuid3', 'uuid1', 2, 's3://user-admin/report_v2.pdf', 6144, ...);&#10;   ```&#10;4. Aktualizuje `files`:&#10;   ```sql&#10;   UPDATE files &#10;   SET current_version = 2, size = 6144, updated_at = NOW()&#10;   WHERE id = 'uuid1';&#10;   ```&#10;5. Upload do S3: `user-admin/report_v2.pdf`&#10;&#10;**Stan w bazie:**&#10;```&#10;files:&#10;  id: uuid1, name: report.pdf, current_version: 2&#10;&#10;file_versions:&#10;  - id: uuid2, file_id: uuid1, version_number: 1&#10;  - id: uuid3, file_id: uuid1, version_number: 2  ← nowa&#10;```&#10;&#10;**Stan w S3:**&#10;```&#10;user-admin/&#10;  ├── report_v1.pdf  ← stara wersja&#10;  └── report_v2.pdf  ← nowa wersja&#10;```&#10;&#10;---&#10;&#10;### Scenariusz 3: Przywracanie wersji&#10;&#10;**Użytkownik:** Przywróć wersję 1&#10;&#10;**Endpoint:** `POST /files/{uuid1}/restore/1`&#10;&#10;**Backend:**&#10;1. Sprawdza czy wersja 1 istnieje → TAK&#10;2. **TYLKO** aktualizuje bazę:&#10;   ```sql&#10;   UPDATE files &#10;   SET current_version = 1, size = 5120, updated_at = NOW()&#10;   WHERE id = 'uuid1';&#10;   ```&#10;3. **NIE kopiuje** plików w S3&#10;&#10;**Stan w bazie:**&#10;```&#10;files:&#10;  id: uuid1, name: report.pdf, current_version: 1  ← zmienione z 2 na 1&#10;&#10;file_versions:&#10;  - id: uuid2, file_id: uuid1, version_number: 1  ← teraz aktualna&#10;  - id: uuid3, file_id: uuid1, version_number: 2&#10;```&#10;&#10;**Stan w S3 (BEZ ZMIAN!):**&#10;```&#10;user-admin/&#10;  ├── report_v1.pdf  ← teraz to będzie pobierane&#10;  └── report_v2.pdf  ← wciąż istnieje&#10;```&#10;&#10;**Efekt:** Następne `GET /files/download/{uuid1}` pobierze `report_v1.pdf`&#10;&#10;---&#10;&#10;### Scenariusz 4: Usuwanie starej wersji&#10;&#10;**Użytkownik:** Usuń wersję 1&#10;&#10;**Endpoint:** `DELETE /files/{uuid1}/versions/1`&#10;&#10;**Backend:**&#10;1. Sprawdza `current_version` → 2 (OK, nie usuwa current)&#10;2. Usuwa z S3: `report_v1.pdf`&#10;3. Usuwa z bazy:&#10;   ```sql&#10;   DELETE FROM file_versions &#10;   WHERE file_id = 'uuid1' AND version_number = 1;&#10;   ```&#10;4. Aktualizuje storage:&#10;   ```sql&#10;   UPDATE users &#10;   SET used_storage_mb = used_storage_mb - (5120 / 1024 / 1024)&#10;   WHERE username = 'admin';&#10;   ```&#10;&#10;**Stan w bazie:**&#10;```&#10;files:&#10;  id: uuid1, name: report.pdf, current_version: 2&#10;&#10;file_versions:&#10;  - id: uuid3, file_id: uuid1, version_number: 2  ← tylko ta pozostała&#10;```&#10;&#10;**Stan w S3:**&#10;```&#10;user-admin/&#10;  └── report_v2.pdf  ← tylko wersja 2&#10;```&#10;&#10;---&#10;&#10;### Scenariusz 5: Usuwanie całego pliku&#10;&#10;**Użytkownik:** Usuń plik `report.pdf`&#10;&#10;**Endpoint:** `DELETE /files/{uuid1}`&#10;&#10;**Backend:**&#10;1. Pobiera wszystkie wersje (1, 2)&#10;2. Usuwa z S3:&#10;   - `report_v1.pdf`&#10;   - `report_v2.pdf`&#10;3. Usuwa z bazy:&#10;   ```sql&#10;   DELETE FROM files WHERE id = 'uuid1';&#10;   -- CASCADE automatycznie usuwa z file_versions&#10;   ```&#10;4. Aktualizuje storage&#10;&#10;**Stan końcowy:**&#10;- Baza: brak rekordów&#10;- S3: brak plików&#10;&#10;---&#10;&#10;## Przykłady użycia&#10;&#10;### 1. Pełny flow: Upload → Nowa wersja → Przywrócenie → Download&#10;&#10;```bash&#10;# 1. Zaloguj się&#10;curl -X POST &quot;http://localhost:8000/api/v1/users/login/totp&quot; \&#10;  -H &quot;Content-Type: application/json&quot; \&#10;  -d '{&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;pass123&quot;,&quot;totp_code&quot;:&quot;123456&quot;}'&#10;# Otrzymujesz: access_token&#10;&#10;TOKEN=&quot;eyJhbGc...&quot;&#10;&#10;# 2. Upload pliku (wersja 1)&#10;curl -X POST &quot;http://localhost:8000/api/v1/files/upload&quot; \&#10;  -H &quot;Authorization: Bearer $TOKEN&quot; \&#10;  -F &quot;file=@document.txt&quot;&#10;# Odpowiedź: {&quot;file_id&quot;: &quot;uuid1&quot;, &quot;version&quot;: 1}&#10;&#10;FILE_ID=&quot;uuid1&quot;&#10;&#10;# 3. Modyfikuj plik lokalnie i upload ponownie (wersja 2)&#10;curl -X POST &quot;http://localhost:8000/api/v1/files/upload&quot; \&#10;  -H &quot;Authorization: Bearer $TOKEN&quot; \&#10;  -F &quot;file=@document.txt&quot;&#10;# Odpowiedź: {&quot;file_id&quot;: &quot;uuid1&quot;, &quot;version&quot;: 2}&#10;&#10;# 4. Zobacz wersje&#10;curl -X GET &quot;http://localhost:8000/api/v1/files/$FILE_ID/versions&quot; \&#10;  -H &quot;Authorization: Bearer $TOKEN&quot;&#10;# Odpowiedź: {&quot;versions&quot;: [{&quot;version_number&quot;: 2, &quot;is_current&quot;: true}, {&quot;version_number&quot;: 1}]}&#10;&#10;# 5. Pobierz aktualną wersję (v2)&#10;curl -X GET &quot;http://localhost:8000/api/v1/files/download/$FILE_ID&quot; \&#10;  -H &quot;Authorization: Bearer $TOKEN&quot; \&#10;  -o current.txt&#10;&#10;# 6. Pobierz starą wersję (v1)&#10;curl -X GET &quot;http://localhost:8000/api/v1/files/$FILE_ID/versions/1&quot; \&#10;  -H &quot;Authorization: Bearer $TOKEN&quot; \&#10;  -o old.txt&#10;&#10;# 7. Przywróć wersję 1&#10;curl -X POST &quot;http://localhost:8000/api/v1/files/$FILE_ID/restore/1&quot; \&#10;  -H &quot;Authorization: Bearer $TOKEN&quot;&#10;# Odpowiedź: {&quot;current_version&quot;: 1}&#10;&#10;# 8. Teraz download pobierze v1!&#10;curl -X GET &quot;http://localhost:8000/api/v1/files/download/$FILE_ID&quot; \&#10;  -H &quot;Authorization: Bearer $TOKEN&quot; \&#10;  -o restored.txt&#10;# restored.txt === old.txt&#10;&#10;# 9. Usuń wersję 2&#10;curl -X DELETE &quot;http://localhost:8000/api/v1/files/$FILE_ID/versions/2&quot; \&#10;  -H &quot;Authorization: Bearer $TOKEN&quot;&#10;```&#10;&#10;---&#10;&#10;### 2. Postman Collection&#10;&#10;**Kolekcja requestów:**&#10;&#10;#### A. Register + TOTP Setup&#10;```&#10;1. POST /users/register&#10;   Body: {&quot;username&quot;: &quot;admin&quot;, &quot;password&quot;: &quot;pass123&quot;}&#10;   &#10;2. POST /totp/setup&#10;   Headers: Authorization: Bearer {setup_token}&#10;   (Zapisz QR code i secret)&#10;   &#10;3. POST /totp/verify&#10;   Headers: Authorization: Bearer {setup_token}&#10;   Body: {&quot;code&quot;: &quot;123456&quot;}&#10;   → Otrzymasz access_token&#10;```&#10;&#10;#### B. Upload i Versioning&#10;```&#10;4. POST /files/upload&#10;   Headers: Authorization: Bearer {access_token}&#10;   Body (form-data): file = [document.txt]&#10;   → file_id: abc-123&#10;   &#10;5. GET /files/&#10;   Headers: Authorization: Bearer {access_token}&#10;   → Lista plików z current_version&#10;   &#10;6. POST /files/upload (ten sam plik, zmieniona treść)&#10;   Headers: Authorization: Bearer {access_token}&#10;   Body (form-data): file = [document.txt]&#10;   → version: 2&#10;   &#10;7. GET /files/abc-123/versions&#10;   Headers: Authorization: Bearer {access_token}&#10;   → Wersje: [2 (current), 1]&#10;   &#10;8. GET /files/download/abc-123&#10;   Headers: Authorization: Bearer {access_token}&#10;   → Pobiera wersję 2&#10;   &#10;9. POST /files/abc-123/restore/1&#10;   Headers: Authorization: Bearer {access_token}&#10;   → current_version = 1&#10;   &#10;10. GET /files/download/abc-123&#10;    Headers: Authorization: Bearer {access_token}&#10;    → Teraz pobiera wersję 1!&#10;```&#10;&#10;---&#10;&#10;## Diagramy przepływu&#10;&#10;### Upload nowego pliku&#10;&#10;```&#10;┌─────────┐     ┌─────────┐     ┌──────────┐     ┌─────┐&#10;│ Client  │────&gt;│ Backend │────&gt;│ Database │     │ S3  │&#10;└─────────┘     └─────────┘     └──────────┘     └─────┘&#10;     │                │                │              │&#10;     │  POST /upload  │                │              │&#10;     │───────────────&gt;│                │              │&#10;     │                │  Check exists? │              │&#10;     │                │───────────────&gt;│              │&#10;     │                │   (NOT FOUND)  │              │&#10;     │                │&lt;───────────────│              │&#10;     │                │                │              │&#10;     │                │  INSERT files  │              │&#10;     │                │  (current_v=1) │              │&#10;     │                │───────────────&gt;│              │&#10;     │                │                │              │&#10;     │                │ INSERT versions│              │&#10;     │                │  (v_number=1)  │              │&#10;     │                │───────────────&gt;│              │&#10;     │                │                │              │&#10;     │                │  PUT file_v1.txt              │&#10;     │                │──────────────────────────────&gt;│&#10;     │                │                │              │&#10;     │&lt;───────────────│                │              │&#10;     │ {file_id, v=1} │                │              │&#10;```&#10;&#10;### Upload kolejnej wersji&#10;&#10;```&#10;┌─────────┐     ┌─────────┐     ┌──────────┐     ┌─────┐&#10;│ Client  │────&gt;│ Backend │────&gt;│ Database │     │ S3  │&#10;└─────────┘     └─────────┘     └──────────┘     └─────┘&#10;     │                │                │              │&#10;     │  POST /upload  │                │              │&#10;     │  (same file)   │                │              │&#10;     │───────────────&gt;│                │              │&#10;     │                │  Check exists? │              │&#10;     │                │───────────────&gt;│              │&#10;     │                │   (FOUND)      │              │&#10;     │                │&lt;───────────────│              │&#10;     │                │                │              │&#10;     │                │ SELECT max(v)  │              │&#10;     │                │───────────────&gt;│              │&#10;     │                │   (max = 2)    │              │&#10;     │                │&lt;───────────────│              │&#10;     │                │                │              │&#10;     │                │ INSERT version │              │&#10;     │                │  (v_number=3)  │              │&#10;     │                │───────────────&gt;│              │&#10;     │                │                │              │&#10;     │                │ UPDATE files   │              │&#10;     │                │ (current_v=3)  │              │&#10;     │                │───────────────&gt;│              │&#10;     │                │                │              │&#10;     │                │  PUT file_v3.txt              │&#10;     │                │──────────────────────────────&gt;│&#10;     │                │                │              │&#10;     │&lt;───────────────│                │              │&#10;     │ {file_id, v=3} │                │              │&#10;```&#10;&#10;### Przywracanie wersji&#10;&#10;```&#10;┌─────────┐     ┌─────────┐     ┌──────────┐     ┌─────┐&#10;│ Client  │────&gt;│ Backend │────&gt;│ Database │     │ S3  │&#10;└─────────┘     └─────────┘     └──────────┘     └─────┘&#10;     │                │                │              │&#10;     │ POST /restore/1│                │              │&#10;     │───────────────&gt;│                │              │&#10;     │                │ Check version  │              │&#10;     │                │    exists?     │              │&#10;     │                │───────────────&gt;│              │&#10;     │                │   (EXISTS)     │              │&#10;     │                │&lt;───────────────│              │&#10;     │                │                │              │&#10;     │                │ UPDATE files   │              │&#10;     │                │ SET current=1  │              │&#10;     │                │───────────────&gt;│              │&#10;     │                │                │              │&#10;     │                │                │   ❌ NO S3   │&#10;     │                │                │   OPERATION  │&#10;     │                │                │              │&#10;     │&lt;───────────────│                │              │&#10;     │ {current_v=1}  │                │              │&#10;```&#10;&#10;### Download pliku&#10;&#10;```&#10;┌─────────┐     ┌─────────┐     ┌──────────┐     ┌─────┐&#10;│ Client  │────&gt;│ Backend │────&gt;│ Database │     │ S3  │&#10;└─────────┘     └─────────┘     └──────────┘     └─────┘&#10;     │                │                │              │&#10;     │ GET /download  │                │              │&#10;     │───────────────&gt;│                │              │&#10;     │                │ SELECT files   │              │&#10;     │                │ (current_v=2)  │              │&#10;     │                │───────────────&gt;│              │&#10;     │                │&lt;───────────────│              │&#10;     │                │                │              │&#10;     │                │ SELECT version │              │&#10;     │                │ (v_number=2)   │              │&#10;     │                │───────────────&gt;│              │&#10;     │                │ (path: s3://.. │              │&#10;     │                │   /file_v2.txt)│              │&#10;     │                │&lt;───────────────│              │&#10;     │                │                │              │&#10;     │                │  GET file_v2.txt              │&#10;     │                │──────────────────────────────&gt;│&#10;     │                │          [binary data]        │&#10;     │                │&lt;──────────────────────────────│&#10;     │                │                │              │&#10;     │&lt;───────────────│                │              │&#10;     │  [file stream] │                │              │&#10;     │  (as file.txt) │                │              │&#10;```&#10;&#10;---&#10;&#10;## Zarządzanie storage&#10;&#10;### Kalkulacja użytego miejsca&#10;&#10;```python&#10;# Każda wersja liczy się do used_storage_mb&#10;user.used_storage_mb = sum(version.size for version in all_versions) / (1024 * 1024)&#10;&#10;# Przykład:&#10;# document_v1.txt: 1 MB&#10;# document_v2.txt: 1.5 MB&#10;# document_v3.txt: 2 MB&#10;# Total: 4.5 MB&#10;&#10;# Po usunięciu v1:&#10;# document_v2.txt: 1.5 MB&#10;# document_v3.txt: 2 MB&#10;# Total: 3.5 MB&#10;```&#10;&#10;### Quota enforcement&#10;&#10;```python&#10;# Przy uploadzię sprawdzane jest:&#10;if (user.used_storage_mb + new_file_size_mb) &gt; user.max_storage_mb:&#10;    raise HTTPException(413, &quot;Storage quota exceeded&quot;)&#10;```&#10;&#10;---&#10;&#10;## Zalety i wady implementacji&#10;&#10;### ✅ Zalety&#10;&#10;1. **Przywracanie bez kopiowania** - instant, tylko UPDATE w bazie&#10;2. **Historia zmian** - wszystkie wersje są dostępne&#10;3. **Elastyczność** - można przeskakiwać między wersjami&#10;4. **Izolacja użytkowników** - każdy ma swój bucket S3&#10;5. **Transparentność** - użytkownik widzi logiczne nazwy plików&#10;&#10;### ⚠️ Wady / Ograniczenia&#10;&#10;1. **Zużycie storage** - każda wersja zajmuje miejsce&#10;2. **Brak automatycznego czyszczenia** - stare wersje nie są usuwane automatycznie&#10;3. **Brak limitu wersji** - można utworzyć nieskończenie wiele wersji&#10;4. **Brak kompresji** - pliki nie są kompresowane&#10;5. **Brak diffu** - nie ma informacji czym się różnią wersje&#10;&#10;###  Możliwe usprawnienia&#10;&#10;1. **Automatyczne czyszczenie** - usuwaj wersje starsze niż N dni&#10;2. **Limit wersji** - maksymalnie 10 wersji na plik&#10;3. **Diff dla plików tekstowych** - pokazuj różnice między wersjami&#10;4. **Kompresja** - kompresuj stare wersje&#10;5. **Tagi/komentarze** - możliwość dodania opisu do wersji&#10;6. **Snapshot całego storage** - przywracanie wszystkich plików do daty&#10;&#10;---&#10;&#10;## Podsumowanie&#10;&#10;System versionowania w SPCloud:&#10;- ✅ Automatycznie tworzy wersje przy każdym uploadzię&#10;- ✅ Przechowuje wszystkie wersje fizycznie w S3&#10;- ✅ Umożliwia przywracanie przez zmianę wskaźnika w bazie&#10;- ✅ Pozwala na pobieranie konkretnych wersji&#10;- ✅ Umożliwia usuwanie niepotrzebnych wersji&#10;- ✅ Liczy wszystkie wersje do quota storage&#10;&#10;**Kluczowa koncepcja:** Pliki fizycznie istnieją jako `file_v1.ext`, `file_v2.ext`, ale użytkownik operuje na logicznej nazwie `file.ext` i system automatycznie wskazuje właściwą wersję przez pole `current_version` w bazie danych.&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docker-compose.dev.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docker-compose.dev.yml" />
              <option name="originalContent" value="# Dockerfile dla środowiska deweloperskiego z hot-reload&#10;&#10;FROM node:22-alpine&#10;&#10;WORKDIR /app&#10;&#10;# Instalacja zależności&#10;COPY package.json package-lock.json* ./&#10;RUN npm ci --prefer-offline --no-audit&#10;&#10;# Kopiowanie plików źródłowych&#10;COPY . .&#10;&#10;# Expose portu&#10;EXPOSE 5173&#10;&#10;# Zmienne środowiskowe dla dev&#10;ENV NODE_ENV=development&#10;&#10;# Uruchomienie w trybie dev z hot-reload&#10;CMD [&quot;npm&quot;, &quot;run&quot;, &quot;dev&quot;, &quot;--&quot;, &quot;--host&quot;, &quot;0.0.0.0&quot;]&#10;&#10;" />
              <option name="updatedContent" value="# Docker Compose dla środowiska deweloperskiego&#10;&#10;services:&#10;  frontend:&#10;    build:&#10;      context: ./frontend&#10;      dockerfile: Dockerfile.dev&#10;    container_name: spcloud_frontend_dev&#10;    restart: unless-stopped&#10;    ports:&#10;      - &quot;${FRONTEND_PORT:-5173}:5173&quot;&#10;    volumes:&#10;      - ./frontend:/app&#10;      - /app/node_modules&#10;    environment:&#10;      - NODE_ENV=development&#10;      - PUBLIC_API_URL=${PUBLIC_API_URL:-http://localhost:8000}&#10;    depends_on:&#10;      - backend&#10;    networks:&#10;      - spcloud_network&#10;&#10;  backend:&#10;    build:&#10;      context: ./backend&#10;    container_name: fastapi_backend&#10;    restart: unless-stopped&#10;    env_file: .env&#10;    ports:&#10;      - &quot;8000:8000&quot;&#10;    volumes:&#10;      - ./backend/app:/app&#10;    depends_on:&#10;      - db&#10;      - minio&#10;    networks:&#10;      - spcloud_network&#10;&#10;  minio:&#10;    image: minio/minio:latest&#10;    container_name: minio&#10;    command: server /data --console-address &quot;:9001&quot;&#10;    restart: unless-stopped&#10;    environment:&#10;      MINIO_ROOT_USER: admin&#10;      MINIO_ROOT_PASSWORD: supersecret&#10;    ports:&#10;      - &quot;9000:9000&quot;&#10;      - &quot;9001:9001&quot;&#10;    volumes:&#10;      - minio_data:/data&#10;    networks:&#10;      - spcloud_network&#10;&#10;  db:&#10;    image: postgres:18&#10;    container_name: postgres_db&#10;    restart: unless-stopped&#10;    env_file: .env&#10;    ports:&#10;      - &quot;${POSTGRES_PORT:-5432}:5432&quot;&#10;    volumes:&#10;      - db_data:/var/lib/postgresql/data&#10;    networks:&#10;      - spcloud_network&#10;&#10;volumes:&#10;  db_data:&#10;  minio_data:&#10;&#10;networks:&#10;  spcloud_network:&#10;    driver: bridge" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/Dockerfile.dev">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/Dockerfile.dev" />
              <option name="updatedContent" value="# Dockerfile dla środowiska deweloperskiego z hot-reload&#10;&#10;FROM node:22-alpine&#10;&#10;WORKDIR /app&#10;&#10;# Instalacja zależności&#10;COPY package.json package-lock.json* ./&#10;RUN npm ci --prefer-offline --no-audit&#10;&#10;# Kopiowanie plików źródłowych&#10;COPY . .&#10;&#10;# Expose portu&#10;EXPOSE 5173&#10;&#10;# Zmienne środowiskowe dla dev&#10;ENV NODE_ENV=development&#10;&#10;# Uruchomienie w trybie dev z hot-reload&#10;CMD [&quot;npm&quot;, &quot;run&quot;, &quot;dev&quot;, &quot;--&quot;, &quot;--host&quot;, &quot;0.0.0.0&quot;]&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/routes/login/+page.svelte">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/routes/login/+page.svelte" />
              <option name="originalContent" value="&lt;script lang=&quot;ts&quot;&gt;&#10;    let username = '';&#10;    let password = '';&#10;    let loginFailed = false;&#10;&#10;    function handleLogin() {&#10;        console.log('Login:', username);&#10;&#10;        loginFailed = false;&#10;        fetch(&quot;http://localhost:8000/api/v1/users/login&quot;, {&#10;            method: 'POST',&#10;            headers: {&#10;                'Content-Type': 'application/json',&#10;            },&#10;            body: JSON.stringify({ username, password }),&#10;        }).then((response) =&gt; {&#10;            if (!response.ok) {&#10;                throw new Error('Login failed');&#10;            }&#10;            return response.json();&#10;        }).then((data) =&gt; {&#10;            if (data.access_token) {&#10;                console.log('Success:', data);&#10;                window.localStorage.setItem('token', JSON.stringify(data.access_token));&#10;                window.location.href = '/dashboard';&#10;            } else {&#10;                loginFailed = true;&#10;                console.error('Login failed:', data.detail);&#10;            }&#10;        }).catch((error) =&gt; {&#10;            loginFailed = true;&#10;            console.error(error);&#10;        })&#10;    }&#10;&lt;/script&gt;&#10;&#10;&lt;div class=&quot;background-container&quot;&gt;&#10;    &lt;div class=&quot;login-panel&quot;&gt;&#10;        &lt;div class=&quot;title&quot;&gt;&#10;            &lt;h1&gt;SPCloud&lt;/h1&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;form onsubmit={handleLogin}&gt;&#10;            &lt;div class=&quot;form-group&quot;&gt;&#10;                &lt;label for=&quot;username&quot;&gt;Login&lt;/label&gt;&#10;                &lt;input&#10;                        type=&quot;text&quot;&#10;                        id=&quot;username&quot;&#10;                        bind:value={username}&#10;                        placeholder=&quot;Wprowadź login&quot;&#10;                        required&#10;                /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;form-group&quot;&gt;&#10;                &lt;label for=&quot;password&quot;&gt;Hasło&lt;/label&gt;&#10;                &lt;input&#10;                        type=&quot;password&quot;&#10;                        id=&quot;password&quot;&#10;                        bind:value={password}&#10;                        placeholder=&quot;Wprowadź hasło&quot;&#10;                        required&#10;                /&gt;&#10;            &lt;/div&gt;&#10;`&#10;            &lt;button type=&quot;submit&quot; class=&quot;btn-login&quot;&gt;Zaloguj się&lt;/button&gt;&#10;        &lt;/form&gt;&#10;        {#if loginFailed}&#10;            &lt;div class=&quot;error&quot;&gt;Zły login lub hasło!&lt;/div&gt;&#10;        {/if}&#10;        &lt;div class=&quot;register-section&quot;&gt;&#10;            &lt;a href=&quot;/register&quot; class=&quot;btn-register&quot;&gt; Zarejestruj się &lt;/a&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;style&gt;&#10;    .background-container {&#10;        width: 100%;&#10;        min-height: 100dvh;&#10;        display: flex;&#10;        justify-content: center;&#10;        align-items: center;&#10;        margin: 0;&#10;        padding: 0;&#10;        overflow-x: hidden;&#10;        position: relative;&#10;    }&#10;&#10;    .login-panel {&#10;        width: 100%;&#10;        max-width: 400px;&#10;        background: var(--primary-bg);&#10;        backdrop-filter: blur(16px);&#10;        -webkit-backdrop-filter: blur(16px);&#10;        border-radius: 16px;&#10;        border: 1px solid var(--border-color);&#10;        box-shadow: 0 8px 32px 0 rgba(14, 11, 32, 0.37);&#10;        padding: 40px;&#10;        animation: slideIn 0.5s ease-out;&#10;        box-sizing: border-box;&#10;    }&#10;&#10;    @keyframes slideIn {&#10;        from {&#10;            opacity: 0;&#10;            transform: translateX(-50px);&#10;        }&#10;        to {&#10;            opacity: 1;&#10;            transform: translateX(0);&#10;        }&#10;    }&#10;&#10;    .title {&#10;        text-align: center;&#10;        margin-bottom: 40px;&#10;    }&#10;&#10;    .title h1 {&#10;        color: #fff;&#10;        font-size: 28px;&#10;        font-weight: 600;&#10;        margin: 0;&#10;    }&#10;&#10;    .form-group {&#10;        margin-bottom: 20px;&#10;    }&#10;&#10;    .form-group label {&#10;        display: block;&#10;        color: var(--text-secondary);&#10;        font-size: 14px;&#10;        font-weight: 500;&#10;        margin-bottom: 8px;&#10;    }&#10;&#10;    .form-group input {&#10;        width: 100%;&#10;        padding: 12px 15px;&#10;        background-color: rgba(0, 0, 0, 0.2);&#10;        border: 1px solid var(--border-color);&#10;        border-radius: 8px;&#10;        font-size: 1rem;&#10;        font-family: var(--font-family), serif;&#10;        color: var(--text-primary);&#10;        box-sizing: border-box;&#10;    }&#10;&#10;    .form-group input:focus {&#10;        outline: none;&#10;        border-color: var(--primary-purple);&#10;        box-shadow: 0 0 0 3px rgba(157, 115, 255, 0.3);&#10;    }&#10;&#10;    .btn-login {&#10;        width: 100%;&#10;        padding: 14px;&#10;        background: var(--primary-purple);&#10;        color: white;&#10;        border: none;&#10;        border-radius: 10px;&#10;        font-size: 16px;&#10;        font-weight: 600;&#10;        cursor: pointer;&#10;        transition: all 0.3s ease;&#10;        margin-top: 10px;&#10;    }&#10;&#10;    .btn-login:hover {&#10;        transform: translateY(-2px);&#10;        box-shadow: 0 5px 20px rgba(157, 115, 255, 0.4);&#10;    }&#10;&#10;    .btn-login:active {&#10;        transform: translateY(0);&#10;    }&#10;&#10;    .register-section {&#10;        margin-top: 30px;&#10;        padding-top: 20px;&#10;        border-top: 1px solid var(--border-color);&#10;        text-align: center;&#10;    }&#10;&#10;    .btn-register {&#10;        text-decoration: none;&#10;        background: transparent;&#10;        color: var(--primary-purple);&#10;        border: 2px solid var(--primary-purple);&#10;        padding: 12px 30px;&#10;        border-radius: 10px;&#10;        font-size: 15px;&#10;        font-weight: 600;&#10;        cursor: pointer;&#10;        transition: all 0.3s ease;&#10;    }&#10;&#10;    .btn-register:hover {&#10;        background: var(--primary-purple);&#10;        color: white;&#10;        transform: translateY(-2px);&#10;    }&#10;&#10;    .btn-register:active {&#10;        transform: translateY(0);&#10;    }&#10;&#10;    .error {&#10;        color: red;&#10;        text-align: center;&#10;        padding: 2px;&#10;    }&#10;&#10;    /* Phone */&#10;    @media (max-width: 768px) {&#10;        .background-container {&#10;            padding: 15px;&#10;            justify-content: center;&#10;            align-items: center;&#10;            min-height: 100dvh;&#10;            background-attachment: scroll;&#10;            background-size: cover;&#10;            background-position: center center;&#10;        }&#10;&#10;        .login-panel {&#10;            max-width: 100%;&#10;            width: 100%;&#10;            padding: 25px 18px;&#10;            max-height: none;&#10;            border-radius: 12px;&#10;            margin: 0;&#10;            box-sizing: border-box;&#10;        }&#10;&#10;        .title {&#10;            margin-bottom: 25px;&#10;        }&#10;&#10;        .title h1 {&#10;            font-size: 24px;&#10;        }&#10;&#10;        .form-group {&#10;            margin-bottom: 16px;&#10;        }&#10;&#10;        .form-group label {&#10;            font-size: 13px;&#10;            margin-bottom: 6px;&#10;        }&#10;&#10;        .form-group input {&#10;            padding: 12px 14px;&#10;            font-size: 16px;&#10;        }&#10;&#10;        .btn-login {&#10;            padding: 13px;&#10;            font-size: 15px;&#10;            margin-top: 8px;&#10;        }&#10;&#10;        .register-section {&#10;            margin-top: 20px;&#10;            padding-top: 16px;&#10;        }&#10;&#10;        .btn-register {&#10;            padding: 11px 25px;&#10;            font-size: 14px;&#10;            display: inline-block;&#10;        }&#10;    }&#10;&#10;    /* Small phones */&#10;    @media (max-width: 480px) {&#10;        .background-container {&#10;            padding: 10px;&#10;            min-height: 100svh;&#10;        }&#10;&#10;        .login-panel {&#10;            padding: 22px 16px;&#10;            border-radius: 10px;&#10;        }&#10;&#10;        .title {&#10;            margin-bottom: 22px;&#10;        }&#10;&#10;        .title h1 {&#10;            font-size: 22px;&#10;        }&#10;&#10;        .form-group {&#10;            margin-bottom: 14px;&#10;        }&#10;&#10;        .form-group label {&#10;            font-size: 12px;&#10;            margin-bottom: 5px;&#10;        }&#10;&#10;        .form-group input {&#10;            padding: 11px 12px;&#10;            font-size: 16px;&#10;        }&#10;&#10;        .btn-login {&#10;            padding: 12px;&#10;            font-size: 15px;&#10;            margin-top: 6px;&#10;        }&#10;&#10;        .register-section {&#10;            margin-top: 18px;&#10;            padding-top: 14px;&#10;        }&#10;&#10;        .btn-register {&#10;            padding: 10px 20px;&#10;            font-size: 14px;&#10;        }&#10;&#10;        .error {&#10;            font-size: 13px;&#10;            padding: 4px;&#10;            margin-top: 10px;&#10;        }&#10;    }&#10;&#10;    /* Very small phones */&#10;    @media (max-width: 360px) {&#10;        .background-container {&#10;            padding: 8px;&#10;            min-height: 100svh;&#10;        }&#10;&#10;        .login-panel {&#10;            padding: 20px 14px;&#10;        }&#10;&#10;        .title h1 {&#10;            font-size: 20px;&#10;        }&#10;&#10;        .form-group input {&#10;            padding: 10px 11px;&#10;            font-size: 16px;&#10;        }&#10;&#10;        .btn-login {&#10;            padding: 11px;&#10;            font-size: 14px;&#10;        }&#10;&#10;        .btn-register {&#10;            padding: 9px 18px;&#10;            font-size: 13px;&#10;        }&#10;    }&#10;&#10;    /* Tablet and small desktop */&#10;    @media (min-width: 769px) and (max-width: 1199px) {&#10;        .background-container {&#10;            justify-content: center;&#10;            padding: 20px;&#10;        }&#10;    }&#10;&#10;    @media (min-width: 1200px) {&#10;        .background-container {&#10;            justify-content: center;&#10;        }&#10;    }&#10;&lt;/style&gt;&#10;" />
              <option name="updatedContent" value="&lt;script lang=&quot;ts&quot;&gt;&#10;    let username = '';&#10;    let password = '';&#10;    let loginFailed = false;&#10;&#10;    function handleLogin() {&#10;        console.log('Login:', username);&#10;&#10;        loginFailed = false;&#10;        fetch(&quot;http://localhost:8000/api/v1/users/login&quot;, {&#10;            method: 'POST',&#10;            headers: {&#10;                'Content-Type': 'application/json',&#10;            },&#10;            body: JSON.stringify({ username, password }),&#10;        }).then((response) =&gt; {&#10;            if (!response.ok) {&#10;                throw new Error('Login failed');&#10;            }&#10;            return response.json();&#10;        }).then((data) =&gt; {&#10;            if (data.access_token) {&#10;                console.log('Success:', data);&#10;                window.localStorage.setItem('token', JSON.stringify(data.access_token));&#10;                window.location.href = '/dashboard';&#10;            } else {&#10;                loginFailed = true;&#10;                console.error('Login failed:', data.detail);&#10;            }&#10;        }).catch((error) =&gt; {&#10;            loginFailed = true;&#10;            console.error(error);&#10;        })&#10;    }&#10;&lt;/script&gt;&#10;&#10;&lt;div class=&quot;background-container&quot;&gt;&#10;    &lt;div class=&quot;login-panel&quot;&gt;&#10;        &lt;div class=&quot;title&quot;&gt;&#10;            &lt;h1&gt;SPCloud&lt;/h1&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;form onsubmit={handleLogin}&gt;&#10;            &lt;div class=&quot;form-group&quot;&gt;&#10;                &lt;label for=&quot;username&quot;&gt;Login&lt;/label&gt;&#10;                &lt;input&#10;                        type=&quot;text&quot;&#10;                        id=&quot;username&quot;&#10;                        bind:value={username}&#10;                        placeholder=&quot;Wprowadź login&quot;&#10;                        required&#10;                /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;form-group&quot;&gt;&#10;                &lt;label for=&quot;password&quot;&gt;Hasło&lt;/label&gt;&#10;                &lt;input&#10;                        type=&quot;password&quot;&#10;                        id=&quot;password&quot;&#10;                        bind:value={password}&#10;                        placeholder=&quot;Wprowadź hasło&quot;&#10;                        required&#10;                /&gt;&#10;            &lt;/div&gt;&#10;`&#10;            &lt;button type=&quot;submit&quot; class=&quot;btn-login&quot;&gt;Zaloguj się&lt;/button&gt;&#10;        &lt;/form&gt;&#10;        {#if loginFailed}&#10;            &lt;div class=&quot;error&quot;&gt;Zły login lub hasło!&lt;/div&gt;&#10;        {/if}&#10;        &lt;div class=&quot;register-section&quot;&gt;&#10;            &lt;a href=&quot;/register&quot; class=&quot;btn-register&quot;&gt; Zarejestruj się &lt;/a&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;style&gt;&#10;    .background-container {&#10;        width: 100%;&#10;        min-height: 100dvh;&#10;        display: flex;&#10;        justify-content: center;&#10;        align-items: center;&#10;        margin: 0;&#10;        padding: 0;&#10;        overflow-x: hidden;&#10;        position: relative;&#10;    }&#10;&#10;    .login-panel {&#10;        width: 100%;&#10;        max-width: 400px;&#10;        background: var(--primary-bg);&#10;        backdrop-filter: blur(16px);&#10;        -webkit-backdrop-filter: blur(16px);&#10;        border-radius: 16px;&#10;        border: 1px solid var(--border-color);&#10;        box-shadow: 0 8px 32px 0 rgba(14, 11, 32, 0.37);&#10;        padding: 40px;&#10;        animation: slideIn 0.5s ease-out;&#10;        box-sizing: border-box;&#10;    }&#10;&#10;    @keyframes slideIn {&#10;        from {&#10;            opacity: 0;&#10;            transform: translateX(-50px);&#10;        }&#10;        to {&#10;            opacity: 1;&#10;            transform: translateX(0);&#10;        }&#10;    }&#10;&#10;    .title {&#10;        text-align: center;&#10;        margin-bottom: 40px;&#10;    }&#10;&#10;    .title h1 {&#10;        color: #fff;&#10;        font-size: 28px;&#10;        font-weight: 600;&#10;        margin: 0;&#10;    }&#10;&#10;    .form-group {&#10;        margin-bottom: 20px;&#10;    }&#10;&#10;    .form-group label {&#10;        display: block;&#10;        color: var(--text-secondary);&#10;        font-size: 14px;&#10;        font-weight: 500;&#10;        margin-bottom: 8px;&#10;    }&#10;&#10;    .form-group input {&#10;        width: 100%;&#10;        padding: 12px 15px;&#10;        background-color: rgba(0, 0, 0, 0.2);&#10;        border: 1px solid var(--border-color);&#10;        border-radius: 8px;&#10;        font-size: 1rem;&#10;        font-family: var(--font-family), serif;&#10;        color: var(--text-primary);&#10;        box-sizing: border-box;&#10;    }&#10;&#10;    .form-group input:focus {&#10;        outline: none;&#10;        border-color: var(--primary-purple);&#10;        box-shadow: 0 0 0 3px rgba(157, 115, 255, 0.3);&#10;    }&#10;&#10;    .btn-login {&#10;        width: 100%;&#10;        padding: 14px;&#10;        background: var(--primary-purple);&#10;        color: white;&#10;        border: none;&#10;        border-radius: 10px;&#10;        font-size: 16px;&#10;        font-weight: 600;&#10;        cursor: pointer;&#10;        transition: all 0.3s ease;&#10;        margin-top: 10px;&#10;    }&#10;&#10;    .btn-login:hover {&#10;        transform: translateY(-2px);&#10;        box-shadow: 0 5px 20px rgba(157, 115, 255, 0.4);&#10;    }&#10;&#10;    .btn-login:active {&#10;        transform: translateY(0);&#10;    }&#10;&#10;    .register-section {&#10;        margin-top: 30px;&#10;        padding-top: 20px;&#10;        border-top: 1px solid var(--border-color);&#10;        text-align: center;&#10;    }&#10;&#10;    .btn-register {&#10;        text-decoration: none;&#10;        background: transparent;&#10;        color: var(--primary-purple);&#10;        border: 2px solid var(--primary-purple);&#10;        padding: 12px 30px;&#10;        border-radius: 10px;&#10;        font-size: 15px;&#10;        font-weight: 600;&#10;        cursor: pointer;&#10;        transition: all 0.3s ease;&#10;    }&#10;&#10;    .btn-register:hover {&#10;        background: var(--primary-purple);&#10;        color: white;&#10;        transform: translateY(-2px);&#10;    }&#10;&#10;    .btn-register:active {&#10;        transform: translateY(0);&#10;    }&#10;&#10;    .error {&#10;        color: red;&#10;        text-align: center;&#10;        padding: 2px;&#10;    }&#10;&#10;    /* Phone */&#10;    @media (max-width: 768px) {&#10;        .background-container {&#10;            padding: 15px;&#10;            justify-content: center;&#10;            align-items: center;&#10;            min-height: 100dvh;&#10;            background-attachment: scroll;&#10;            background-size: cover;&#10;            background-position: center center;&#10;        }&#10;&#10;        .login-panel {&#10;            max-width: 100%;&#10;            width: 100%;&#10;            padding: 25px 18px;&#10;            max-height: none;&#10;            border-radius: 12px;&#10;            margin: 0;&#10;            box-sizing: border-box;&#10;        }&#10;&#10;        .title {&#10;            margin-bottom: 25px;&#10;        }&#10;&#10;        .title h1 {&#10;            font-size: 24px;&#10;        }&#10;&#10;        .form-group {&#10;            margin-bottom: 16px;&#10;        }&#10;&#10;        .form-group label {&#10;            font-size: 13px;&#10;            margin-bottom: 6px;&#10;        }&#10;&#10;        .form-group input {&#10;            padding: 12px 14px;&#10;            font-size: 16px;&#10;        }&#10;&#10;        .btn-login {&#10;            padding: 13px;&#10;            font-size: 15px;&#10;            margin-top: 8px;&#10;        }&#10;&#10;        .register-section {&#10;            margin-top: 20px;&#10;            padding-top: 16px;&#10;        }&#10;&#10;        .btn-register {&#10;            padding: 11px 25px;&#10;            font-size: 14px;&#10;            display: inline-block;&#10;        }&#10;    }&#10;&#10;    /* Small phones */&#10;    @media (max-width: 480px) {&#10;        .background-container {&#10;            padding: 10px;&#10;            min-height: 100svh;&#10;        }&#10;&#10;        .login-panel {&#10;            padding: 22px 16px;&#10;            border-radius: 10px;&#10;        }&#10;&#10;        .title {&#10;            margin-bottom: 22px;&#10;        }&#10;&#10;        .title h1 {&#10;            font-size: 22px;&#10;        }&#10;&#10;        .form-group {&#10;            margin-bottom: 14px;&#10;        }&#10;&#10;        .form-group label {&#10;            font-size: 12px;&#10;            margin-bottom: 5px;&#10;        }&#10;&#10;        .form-group input {&#10;            padding: 11px 12px;&#10;            font-size: 16px;&#10;        }&#10;&#10;        .btn-login {&#10;            padding: 12px;&#10;            font-size: 15px;&#10;            margin-top: 6px;&#10;        }&#10;&#10;        .register-section {&#10;            margin-top: 18px;&#10;            padding-top: 14px;&#10;        }&#10;&#10;        .btn-register {&#10;            padding: 10px 20px;&#10;            font-size: 14px;&#10;        }&#10;&#10;        .error {&#10;            font-size: 13px;&#10;            padding: 4px;&#10;            margin-top: 10px;&#10;        }&#10;    }&#10;&#10;    /* Very small phones */&#10;    @media (max-width: 360px) {&#10;        .background-container {&#10;            padding: 8px;&#10;            min-height: 100svh;&#10;        }&#10;&#10;        .login-panel {&#10;            padding: 20px 14px;&#10;        }&#10;&#10;        .title h1 {&#10;            font-size: 20px;&#10;        }&#10;&#10;        .form-group input {&#10;            padding: 10px 11px;&#10;            font-size: 16px;&#10;        }&#10;&#10;        .btn-login {&#10;            padding: 11px;&#10;            font-size: 14px;&#10;        }&#10;&#10;        .btn-register {&#10;            padding: 9px 18px;&#10;            font-size: 13px;&#10;        }&#10;    }&#10;&#10;    /* Tablet and small desktop */&#10;    @media (min-width: 769px) and (max-width: 1199px) {&#10;        .background-container {&#10;            justify-content: center;&#10;            padding: 20px;&#10;        }&#10;    }&#10;&#10;    @media (min-width: 1200px) {&#10;        .background-container {&#10;            justify-content: center;&#10;        }&#10;    }&#10;&lt;/style&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/routes/register/+page.svelte">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/routes/register/+page.svelte" />
              <option name="originalContent" value="&lt;script lang=&quot;ts&quot;&gt;&#10;    let username = '';&#10;    let password = '';&#10;    let repeatPassword = '';&#10;&#10;    let registerFailedUsernameTaken = false;&#10;    let registerFailedUsernameIsEmpty = false;&#10;&#10;    let registerFailedPasswordsNotSame = false;&#10;    let registerFailedPasswordIsEmpty = false;&#10;    let registerFailedPasswordTooShort = false;&#10;&#10;    /**&#10;     * Handles the login process when the &quot;Login&quot; button is clicked.&#10;     */&#10;    function handleRegister() {&#10;&#10;        const MIN_PASSWORD_LENGTH = 2;&#10;&#10;        registerFailedUsernameTaken = false;&#10;        registerFailedUsernameIsEmpty = false;&#10;        registerFailedPasswordsNotSame = false;&#10;        registerFailedPasswordIsEmpty = false;&#10;        registerFailedPasswordTooShort = false;&#10;&#10;        if (username.length === 0) {&#10;            registerFailedUsernameIsEmpty = true;&#10;            console.error('Username is empty');&#10;            return;&#10;        }&#10;&#10;        if (password.length === 0) {&#10;            registerFailedPasswordIsEmpty = true;&#10;            console.error('Password is empty');&#10;            return;&#10;        }&#10;&#10;        if (password !== repeatPassword) {&#10;            registerFailedPasswordsNotSame = true;&#10;            console.error('Passwords do not match');&#10;            return;&#10;        }&#10;&#10;        if (password.length &lt; MIN_PASSWORD_LENGTH) {&#10;            registerFailedPasswordTooShort = true;&#10;            console.error('Password is too short');&#10;            return;&#10;        }&#10;&#10;        fetch(&quot;http://localhost:8000/api/v1/users/register&quot;, {&#10;            method: 'POST',&#10;            headers: {&#10;                'Content-Type': 'application/json',&#10;            },&#10;            body: JSON.stringify({ username, password }),&#10;        }).then((response) =&gt; {&#10;            if (!response.ok) {&#10;                throw new Error('Registration failed');&#10;            }&#10;            return response.json();&#10;        }).then((data) =&gt; {&#10;            if (data.access_token) {&#10;                console.log('Success:', data);&#10;                window.localStorage.setItem('token', JSON.stringify(data.access_token));&#10;                window.location.href = '/dashboard';&#10;            } else {&#10;                registerFailedUsernameTaken = true;&#10;                console.error('Registration failed:', data.detail);&#10;            }&#10;        }).catch((error) =&gt; {&#10;            registerFailedUsernameTaken = true;&#10;            console.error(error);&#10;        })&#10;    }&#10;&lt;/script&gt;&#10;&#10;&lt;div class=&quot;register-container&quot;&gt;&#10;    &lt;div class=&quot;login-panel&quot;&gt;&#10;        &lt;div class=&quot;title&quot;&gt;&#10;            &lt;h1&gt;SPCloud&lt;/h1&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;form onsubmit={handleRegister}&gt;&#10;            &lt;div class=&quot;form-group&quot;&gt;&#10;                &lt;label for=&quot;username&quot;&gt;Login&lt;/label&gt;&#10;                &lt;input&#10;                        type=&quot;text&quot;&#10;                        id=&quot;username&quot;&#10;                        bind:value={username}&#10;                        placeholder=&quot;Wprowadź login&quot;&#10;                        required&#10;                /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;form-group&quot;&gt;&#10;                &lt;label for=&quot;password&quot;&gt;Hasło&lt;/label&gt;&#10;                &lt;input&#10;                        type=&quot;password&quot;&#10;                        id=&quot;password&quot;&#10;                        bind:value={password}&#10;                        placeholder=&quot;Wprowadź hasło&quot;&#10;                        required&#10;                /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;form-group&quot;&gt;&#10;                &lt;label for=&quot;repeat-password&quot;&gt;Powtórz hasło&lt;/label&gt;&#10;                &lt;input&#10;                        type=&quot;password&quot;&#10;                        id=&quot;repeat-password&quot;&#10;                        bind:value={repeatPassword}&#10;                        placeholder=&quot;Wprowadź hasło&quot;&#10;                        required&#10;                /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;button type=&quot;submit&quot; class=&quot;btn-login&quot;&gt;Zarejestruj się&lt;/button&gt;&#10;        &lt;/form&gt;&#10;        {#if registerFailedUsernameTaken}&#10;            &lt;div class=&quot;error&quot;&gt;Ten login jest już użyty!&lt;/div&gt;&#10;        {:else if registerFailedUsernameIsEmpty}&#10;            &lt;div class=&quot;error&quot;&gt;Login nie może być pusty!&lt;/div&gt;&#10;        {:else if registerFailedPasswordIsEmpty}&#10;            &lt;div class=&quot;error&quot;&gt;Hasło nie może być puste!&lt;/div&gt;&#10;        {:else if registerFailedPasswordsNotSame}&#10;            &lt;div class=&quot;error&quot;&gt;Hasła nie są takie same!&lt;/div&gt;&#10;        {:else if registerFailedPasswordTooShort}&#10;            &lt;div class=&quot;error&quot;&gt;Hasło jest za krótkie!&lt;/div&gt;&#10;        {/if}&#10;&#10;        &lt;div class=&quot;register-section&quot;&gt;&#10;            &lt;a href=&quot;/login&quot; class=&quot;btn-register&quot;&gt; Zaloguj się &lt;/a&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;style&gt;&#10;    .register-container {&#10;        width: 100%;&#10;        min-height: 100dvh;&#10;        display: flex;&#10;        justify-content: center;&#10;        align-items: center;&#10;        margin: 0;&#10;        padding: 0;&#10;        overflow-x: hidden;&#10;        position: relative;&#10;    }&#10;&#10;    .login-panel {&#10;        width: 100%;&#10;        max-width: 400px;&#10;        background: var(--primary-bg);&#10;        backdrop-filter: blur(16px);&#10;        -webkit-backdrop-filter: blur(16px);&#10;        border-radius: 16px;&#10;        border: 1px solid var(--border-color);&#10;        box-shadow: 0 8px 32px 0 rgba(14, 11, 32, 0.37);&#10;        padding: 40px;&#10;        animation: slideIn 0.5s ease-out;&#10;        box-sizing: border-box;&#10;    }&#10;&#10;    @keyframes slideIn {&#10;        from {&#10;            opacity: 0;&#10;            transform: translateX(-50px);&#10;        }&#10;        to {&#10;            opacity: 1;&#10;            transform: translateX(0);&#10;        }&#10;    }&#10;&#10;    .title {&#10;        text-align: center;&#10;        margin-bottom: 40px;&#10;    }&#10;&#10;    .title h1 {&#10;        color: #fff;&#10;        font-size: 28px;&#10;        font-weight: 600;&#10;        margin: 0;&#10;    }&#10;&#10;    .form-group {&#10;        margin-bottom: 20px;&#10;    }&#10;&#10;    .form-group label {&#10;        display: block;&#10;        color: var(--text-secondary);&#10;        font-size: 14px;&#10;        font-weight: 500;&#10;        margin-bottom: 8px;&#10;    }&#10;&#10;    .form-group input {&#10;        width: 100%;&#10;        padding: 12px 15px;&#10;        background-color: rgba(0, 0, 0, 0.2);&#10;        border: 1px solid var(--border-color);&#10;        border-radius: 8px;&#10;        font-size: 1rem;&#10;        font-family: var(--font-family), serif;&#10;        color: var(--text-primary);&#10;        box-sizing: border-box;&#10;    }&#10;&#10;    .form-group input:focus {&#10;        outline: none;&#10;        border-color: var(--primary-purple);&#10;        box-shadow: 0 0 0 3px rgba(157, 115, 255, 0.3);&#10;    }&#10;&#10;    .btn-login {&#10;        width: 100%;&#10;        padding: 14px;&#10;        background: var(--primary-purple);&#10;        color: white;&#10;        border: none;&#10;        border-radius: 10px;&#10;        font-size: 16px;&#10;        font-weight: 600;&#10;        cursor: pointer;&#10;        transition: all 0.3s ease;&#10;        margin-top: 10px;&#10;    }&#10;&#10;    .btn-login:hover {&#10;        transform: translateY(-2px);&#10;        box-shadow: 0 5px 20px rgba(157, 115, 255, 0.4);&#10;    }&#10;&#10;    .btn-login:active {&#10;        transform: translateY(0);&#10;    }&#10;&#10;    .register-section {&#10;        margin-top: 30px;&#10;        padding-top: 20px;&#10;        border-top: 1px solid var(--border-color);&#10;        text-align: center;&#10;    }&#10;&#10;    .btn-register {&#10;        text-decoration: none;&#10;        background: transparent;&#10;        color: var(--primary-purple);&#10;        border: 2px solid var(--primary-purple);&#10;        padding: 12px 30px;&#10;        border-radius: 10px;&#10;        font-size: 15px;&#10;        font-weight: 600;&#10;        cursor: pointer;&#10;        transition: all 0.3s ease;&#10;    }&#10;&#10;    .btn-register:hover {&#10;        background: var(--primary-purple);&#10;        color: white;&#10;        transform: translateY(-2px);&#10;    }&#10;&#10;    .btn-register:active {&#10;        transform: translateY(0);&#10;    }&#10;&#10;    .error {&#10;        color: red;&#10;        text-align: center;&#10;        padding: 2px;&#10;    }&#10;&#10;    @media (max-width: 768px) {&#10;        .register-container {&#10;            padding: 15px;&#10;            justify-content: center;&#10;            align-items: center;&#10;            min-height: 100dvh;&#10;            background-attachment: scroll;&#10;            background-size: cover;&#10;            background-position: center center;&#10;        }&#10;&#10;        .login-panel {&#10;            max-width: 100%;&#10;            width: 100%;&#10;            padding: 25px 18px;&#10;            max-height: none;&#10;            border-radius: 12px;&#10;            margin: 0;&#10;            box-sizing: border-box;&#10;        }&#10;&#10;        .title {&#10;            margin-bottom: 25px;&#10;        }&#10;&#10;        .title h1 {&#10;            font-size: 24px;&#10;        }&#10;&#10;        .form-group {&#10;            margin-bottom: 16px;&#10;        }&#10;&#10;        .form-group label {&#10;            font-size: 13px;&#10;            margin-bottom: 6px;&#10;        }&#10;&#10;        .form-group input {&#10;            padding: 12px 14px;&#10;            font-size: 16px;&#10;        }&#10;&#10;        .btn-login {&#10;            padding: 13px;&#10;            font-size: 15px;&#10;            margin-top: 8px;&#10;        }&#10;&#10;        .register-section {&#10;            margin-top: 20px;&#10;            padding-top: 16px;&#10;        }&#10;&#10;        .btn-register {&#10;            padding: 11px 25px;&#10;            font-size: 14px;&#10;            display: inline-block;&#10;        }&#10;&#10;        .error {&#10;            font-size: 14px;&#10;            margin-top: 12px;&#10;        }&#10;    }&#10;&#10;    @media (min-width: 769px) and (max-width: 1199px) {&#10;        .register-container {&#10;            justify-content: center;&#10;            padding: 20px;&#10;        }&#10;    }&#10;&#10;    @media (min-width: 1200px) {&#10;        .register-container {&#10;            justify-content: center;&#10;        }&#10;    }&#10;&lt;/style&gt;&#10;" />
              <option name="updatedContent" value="&lt;script lang=&quot;ts&quot;&gt;&#10;    let username = '';&#10;    let password = '';&#10;    let repeatPassword = '';&#10;&#10;    let registerFailedUsernameTaken = false;&#10;    let registerFailedUsernameIsEmpty = false;&#10;&#10;    let registerFailedPasswordsNotSame = false;&#10;    let registerFailedPasswordIsEmpty = false;&#10;    let registerFailedPasswordTooShort = false;&#10;&#10;    /**&#10;     * Handles the login process when the &quot;Login&quot; button is clicked.&#10;     */&#10;    function handleRegister() {&#10;&#10;        const MIN_PASSWORD_LENGTH = 2;&#10;&#10;        registerFailedUsernameTaken = false;&#10;        registerFailedUsernameIsEmpty = false;&#10;        registerFailedPasswordsNotSame = false;&#10;        registerFailedPasswordIsEmpty = false;&#10;        registerFailedPasswordTooShort = false;&#10;&#10;        if (username.length === 0) {&#10;            registerFailedUsernameIsEmpty = true;&#10;            console.error('Username is empty');&#10;            return;&#10;        }&#10;&#10;        if (password.length === 0) {&#10;            registerFailedPasswordIsEmpty = true;&#10;            console.error('Password is empty');&#10;            return;&#10;        }&#10;&#10;        if (password !== repeatPassword) {&#10;            registerFailedPasswordsNotSame = true;&#10;            console.error('Passwords do not match');&#10;            return;&#10;        }&#10;&#10;        if (password.length &lt; MIN_PASSWORD_LENGTH) {&#10;            registerFailedPasswordTooShort = true;&#10;            console.error('Password is too short');&#10;            return;&#10;        }&#10;&#10;        fetch(&quot;http://localhost:8000/api/v1/users/register&quot;, {&#10;            method: 'POST',&#10;            headers: {&#10;                'Content-Type': 'application/json',&#10;            },&#10;            body: JSON.stringify({ username, password }),&#10;        }).then((response) =&gt; {&#10;            if (!response.ok) {&#10;                throw new Error('Registration failed');&#10;            }&#10;            return response.json();&#10;        }).then((data) =&gt; {&#10;            if (data.access_token) {&#10;                console.log('Success:', data);&#10;                window.localStorage.setItem('token', JSON.stringify(data.access_token));&#10;                window.location.href = '/dashboard';&#10;            } else {&#10;                registerFailedUsernameTaken = true;&#10;                console.error('Registration failed:', data.detail);&#10;            }&#10;        }).catch((error) =&gt; {&#10;            registerFailedUsernameTaken = true;&#10;            console.error(error);&#10;        })&#10;    }&#10;&lt;/script&gt;&#10;&#10;&lt;div class=&quot;register-container&quot;&gt;&#10;    &lt;div class=&quot;login-panel&quot;&gt;&#10;        &lt;div class=&quot;title&quot;&gt;&#10;            &lt;h1&gt;SPCloud&lt;/h1&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;form onsubmit={handleRegister}&gt;&#10;            &lt;div class=&quot;form-group&quot;&gt;&#10;                &lt;label for=&quot;username&quot;&gt;Login&lt;/label&gt;&#10;                &lt;input&#10;                        type=&quot;text&quot;&#10;                        id=&quot;username&quot;&#10;                        bind:value={username}&#10;                        placeholder=&quot;Wprowadź login&quot;&#10;                        required&#10;                /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;form-group&quot;&gt;&#10;                &lt;label for=&quot;password&quot;&gt;Hasło&lt;/label&gt;&#10;                &lt;input&#10;                        type=&quot;password&quot;&#10;                        id=&quot;password&quot;&#10;                        bind:value={password}&#10;                        placeholder=&quot;Wprowadź hasło&quot;&#10;                        required&#10;                /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;form-group&quot;&gt;&#10;                &lt;label for=&quot;repeat-password&quot;&gt;Powtórz hasło&lt;/label&gt;&#10;                &lt;input&#10;                        type=&quot;password&quot;&#10;                        id=&quot;repeat-password&quot;&#10;                        bind:value={repeatPassword}&#10;                        placeholder=&quot;Wprowadź hasło&quot;&#10;                        required&#10;                /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;button type=&quot;submit&quot; class=&quot;btn-login&quot;&gt;Zarejestruj się&lt;/button&gt;&#10;        &lt;/form&gt;&#10;        {#if registerFailedUsernameTaken}&#10;            &lt;div class=&quot;error&quot;&gt;Ten login jest już użyty!&lt;/div&gt;&#10;        {:else if registerFailedUsernameIsEmpty}&#10;            &lt;div class=&quot;error&quot;&gt;Login nie może być pusty!&lt;/div&gt;&#10;        {:else if registerFailedPasswordIsEmpty}&#10;            &lt;div class=&quot;error&quot;&gt;Hasło nie może być puste!&lt;/div&gt;&#10;        {:else if registerFailedPasswordsNotSame}&#10;            &lt;div class=&quot;error&quot;&gt;Hasła nie są takie same!&lt;/div&gt;&#10;        {:else if registerFailedPasswordTooShort}&#10;            &lt;div class=&quot;error&quot;&gt;Hasło jest za krótkie!&lt;/div&gt;&#10;        {/if}&#10;&#10;        &lt;div class=&quot;register-section&quot;&gt;&#10;            &lt;a href=&quot;/login&quot; class=&quot;btn-register&quot;&gt; Zaloguj się &lt;/a&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;style&gt;&#10;    .register-container {&#10;        width: 100%;&#10;        min-height: 100dvh;&#10;        display: flex;&#10;        justify-content: center;&#10;        align-items: center;&#10;        margin: 0;&#10;        padding: 0;&#10;        overflow-x: hidden;&#10;        position: relative;&#10;    }&#10;&#10;    .login-panel {&#10;        width: 100%;&#10;        max-width: 400px;&#10;        background: var(--primary-bg);&#10;        backdrop-filter: blur(16px);&#10;        -webkit-backdrop-filter: blur(16px);&#10;        border-radius: 16px;&#10;        border: 1px solid var(--border-color);&#10;        box-shadow: 0 8px 32px 0 rgba(14, 11, 32, 0.37);&#10;        padding: 40px;&#10;        animation: slideIn 0.5s ease-out;&#10;        box-sizing: border-box;&#10;    }&#10;&#10;    @keyframes slideIn {&#10;        from {&#10;            opacity: 0;&#10;            transform: translateX(-50px);&#10;        }&#10;        to {&#10;            opacity: 1;&#10;            transform: translateX(0);&#10;        }&#10;    }&#10;&#10;    .title {&#10;        text-align: center;&#10;        margin-bottom: 40px;&#10;    }&#10;&#10;    .title h1 {&#10;        color: #fff;&#10;        font-size: 28px;&#10;        font-weight: 600;&#10;        margin: 0;&#10;    }&#10;&#10;    .form-group {&#10;        margin-bottom: 20px;&#10;    }&#10;&#10;    .form-group label {&#10;        display: block;&#10;        color: var(--text-secondary);&#10;        font-size: 14px;&#10;        font-weight: 500;&#10;        margin-bottom: 8px;&#10;    }&#10;&#10;    .form-group input {&#10;        width: 100%;&#10;        padding: 12px 15px;&#10;        background-color: rgba(0, 0, 0, 0.2);&#10;        border: 1px solid var(--border-color);&#10;        border-radius: 8px;&#10;        font-size: 1rem;&#10;        font-family: var(--font-family), serif;&#10;        color: var(--text-primary);&#10;        box-sizing: border-box;&#10;    }&#10;&#10;    .form-group input:focus {&#10;        outline: none;&#10;        border-color: var(--primary-purple);&#10;        box-shadow: 0 0 0 3px rgba(157, 115, 255, 0.3);&#10;    }&#10;&#10;    .btn-login {&#10;        width: 100%;&#10;        padding: 14px;&#10;        background: var(--primary-purple);&#10;        color: white;&#10;        border: none;&#10;        border-radius: 10px;&#10;        font-size: 16px;&#10;        font-weight: 600;&#10;        cursor: pointer;&#10;        transition: all 0.3s ease;&#10;        margin-top: 10px;&#10;    }&#10;&#10;    .btn-login:hover {&#10;        transform: translateY(-2px);&#10;        box-shadow: 0 5px 20px rgba(157, 115, 255, 0.4);&#10;    }&#10;&#10;    .btn-login:active {&#10;        transform: translateY(0);&#10;    }&#10;&#10;    .register-section {&#10;        margin-top: 30px;&#10;        padding-top: 20px;&#10;        border-top: 1px solid var(--border-color);&#10;        text-align: center;&#10;    }&#10;&#10;    .btn-register {&#10;        text-decoration: none;&#10;        background: transparent;&#10;        color: var(--primary-purple);&#10;        border: 2px solid var(--primary-purple);&#10;        padding: 12px 30px;&#10;        border-radius: 10px;&#10;        font-size: 15px;&#10;        font-weight: 600;&#10;        cursor: pointer;&#10;        transition: all 0.3s ease;&#10;    }&#10;&#10;    .btn-register:hover {&#10;        background: var(--primary-purple);&#10;        color: white;&#10;        transform: translateY(-2px);&#10;    }&#10;&#10;    .btn-register:active {&#10;        transform: translateY(0);&#10;    }&#10;&#10;    .error {&#10;        color: red;&#10;        text-align: center;&#10;        padding: 2px;&#10;    }&#10;&#10;    @media (max-width: 768px) {&#10;        .register-container {&#10;            padding: 15px;&#10;            justify-content: center;&#10;            align-items: center;&#10;            min-height: 100dvh;&#10;            background-attachment: scroll;&#10;            background-size: cover;&#10;            background-position: center center;&#10;        }&#10;&#10;        .login-panel {&#10;            max-width: 100%;&#10;            width: 100%;&#10;            padding: 25px 18px;&#10;            max-height: none;&#10;            border-radius: 12px;&#10;            margin: 0;&#10;            box-sizing: border-box;&#10;        }&#10;&#10;        .title {&#10;            margin-bottom: 25px;&#10;        }&#10;&#10;        .title h1 {&#10;            font-size: 24px;&#10;        }&#10;&#10;        .form-group {&#10;            margin-bottom: 16px;&#10;        }&#10;&#10;        .form-group label {&#10;            font-size: 13px;&#10;            margin-bottom: 6px;&#10;        }&#10;&#10;        .form-group input {&#10;            padding: 12px 14px;&#10;            font-size: 16px;&#10;        }&#10;&#10;        .btn-login {&#10;            padding: 13px;&#10;            font-size: 15px;&#10;            margin-top: 8px;&#10;        }&#10;&#10;        .register-section {&#10;            margin-top: 20px;&#10;            padding-top: 16px;&#10;        }&#10;&#10;        .btn-register {&#10;            padding: 11px 25px;&#10;            font-size: 14px;&#10;            display: inline-block;&#10;        }&#10;&#10;        .error {&#10;            font-size: 14px;&#10;            margin-top: 12px;&#10;        }&#10;    }&#10;&#10;    @media (min-width: 769px) and (max-width: 1199px) {&#10;        .register-container {&#10;            justify-content: center;&#10;            padding: 20px;&#10;        }&#10;    }&#10;&#10;    @media (min-width: 1200px) {&#10;        .register-container {&#10;            justify-content: center;&#10;        }&#10;    }&#10;&lt;/style&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>